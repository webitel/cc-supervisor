{
  "version": 3,
  "sources": ["../../node_modules/@webitel/ui-sdk/src/modules/CSVExport/composables/useCSVExport.ts"],
  "sourcesContent": ["import applyTransform, { notify } from '@webitel/ui-sdk/api/transformers/index';\nimport { computed, Ref, ref } from 'vue';\nimport { useRoute } from 'vue-router';\n\nimport CSVExport from '../CSVExport';\n\nexport type CSVRow = Record<string, any>;\n\nexport type FetchMethod = (params: Record<string, any>) => Promise<{\n  items: CSVRow[];\n  next: boolean;\n}>;\n\ninterface CSVExportOptions {\n  filename?: string;\n  delimiter?: string;\n}\n\nconst CSV_EXPORT_BATCH_SIZE = 5000;\n\nexport function useCSVExport({ selected }: { selected: Ref<number[]> }) {\n  const CSVExportInstance = ref<null | InstanceType<typeof CSVExport>>(null);\n  const route = useRoute();\n\n  const CSVDownloadProgress = computed(() =>\n    CSVExportInstance.value\n      ? CSVExportInstance.value.downloadProgress.count\n      : 0,\n  );\n\n  const isCSVLoading = computed(() => !!CSVDownloadProgress.value);\n\n  const isAnySelected = computed(() => !!selected.value.length);\n\n  function initCSVExport(\n    fetchMethod: FetchMethod,\n    options: CSVExportOptions = {},\n  ) {\n    CSVExportInstance.value = new CSVExport(fetchMethod, options);\n  }\n\n  async function exportCSV(exportParams?: Record<string, any>) {\n    const routeQuery = route.query;\n    const params = {\n      ...(exportParams || routeQuery),\n      size: CSV_EXPORT_BATCH_SIZE,\n    };\n\n    if (isAnySelected.value) {\n      params.id = selected.value;\n    }\n\n    try {\n      await CSVExportInstance.value?.export(params);\n    } catch (err) {\n      throw applyTransform(err, [notify]);\n    }\n  }\n\n  return {\n    CSVExportInstance,\n\n    CSVDownloadProgress,\n    isCSVLoading,\n    isAnySelected,\n\n    initCSVExport,\n    exportCSV,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAkBA,IAAM,wBAAwB;AAEvB,SAAS,aAAa,EAAE,SAAS,GAAgC;AACtE,QAAM,oBAAoB,IAA2C,IAAI;AACzE,QAAM,QAAQ,SAAS;AAEvB,QAAM,sBAAsB;AAAA,IAAS,MACnC,kBAAkB,QACd,kBAAkB,MAAM,iBAAiB,QACzC;AAAA,EACN;AAEA,QAAM,eAAe,SAAS,MAAM,CAAC,CAAC,oBAAoB,KAAK;AAE/D,QAAM,gBAAgB,SAAS,MAAM,CAAC,CAAC,SAAS,MAAM,MAAM;AAE5D,WAAS,cACP,aACA,UAA4B,CAAC,GAC7B;AACA,sBAAkB,QAAQ,IAAI,UAAU,aAAa,OAAO;AAAA,EAC9D;AAEA,iBAAe,UAAU,cAAoC;AAzC/D;AA0CI,UAAM,aAAa,MAAM;AACzB,UAAM,SAAS;AAAA,MACb,GAAI,gBAAgB;AAAA,MACpB,MAAM;AAAA,IACR;AAEA,QAAI,cAAc,OAAO;AACvB,aAAO,KAAK,SAAS;AAAA,IACvB;AAEA,QAAI;AACF,cAAM,uBAAkB,UAAlB,mBAAyB,OAAO;AAAA,IACxC,SAAS,KAAK;AACZ,YAAM,qBAAe,KAAK,CAAC,0BAAM,CAAC;AAAA,IACpC;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["import_dist"]
}
