{
  "version": 3,
  "sources": ["../../node_modules/@webitel/api-services/src/utils/api/caseConverters.ts"],
  "sourcesContent": ["export const snakeToCamel = (str) =>\n\tstr.replace(/([a-z])([_])([a-z])/g, (_group, p1, _p2, p3) =>\n\t\t[p1, p3.toUpperCase()].join(''),\n\t);\n\nexport const camelToSnake = (str) =>\n\tstr.replace(/([a-z])([A-Z])/g, (_group, p1, p2) =>\n\t\t[p1, '_', p2.toLowerCase()].join(''),\n\t);\n\nexport const kebabToCamel = (str) =>\n\tstr.replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace('-', ''));\n\nexport const camelToKebab = (str) =>\n\tstr.replace(/([A-Z])/g, (group) => group.toLowerCase().replace('', '-'));\n\nexport const kebabToSnake = (str) =>\n\tstr.replace(/([-_][a-z])/g, (group) => group.replace('-', '_'));\n\nexport const snakeToKebab = (str) =>\n\tstr.replace(/([-_][a-z])/g, (group) => group.replace('_', '-'));\n\nconst convertObject =\n\t({ self, converter }) =>\n\t(obj, skipKeys) => {\n\t\tif (!obj) return obj;\n\t\tconst newObj = {};\n\t\tif (Array.isArray(obj)) {\n\t\t\treturn obj.map((value) => {\n\t\t\t\tif (typeof value === 'object') {\n\t\t\t\t\treturn self(value, skipKeys);\n\t\t\t\t}\n\t\t\t\tif (typeof value === 'string') return converter(value);\n\t\t\t\treturn value; // number\n\t\t\t});\n\t\t}\n\t\tObject.keys(obj).forEach((oldKey) => {\n\t\t\tif (skipKeys.includes(oldKey)) {\n\t\t\t\tnewObj[oldKey] = obj[oldKey];\n\t\t\t} else {\n\t\t\t\tconst newKey = converter(oldKey);\n\t\t\t\tlet value = obj[oldKey];\n\t\t\t\tif (\n\t\t\t\t\tArray.isArray(value) ||\n\t\t\t\t\t(value !== null &&\n\t\t\t\t\t\tvalue !== undefined &&\n\t\t\t\t\t\tvalue.constructor === Object)\n\t\t\t\t) {\n\t\t\t\t\tvalue = self(value, skipKeys);\n\t\t\t\t}\n\t\t\t\tnewObj[newKey] = value;\n\t\t\t}\n\t\t});\n\n\t\treturn newObj;\n\t};\n\nexport const objSnakeToCamel = (obj, skipKeys = []) => {\n\treturn convertObject({\n\t\tself: objSnakeToCamel,\n\t\tconverter: snakeToCamel,\n\t})(obj, skipKeys);\n};\n\nexport const objCamelToSnake = (obj, skipKeys = []) => {\n\treturn convertObject({\n\t\tself: objCamelToSnake,\n\t\tconverter: camelToSnake,\n\t})(obj, skipKeys);\n};\n\nexport const objCamelToKebab = (obj, skipKeys = []) => {\n\treturn convertObject({\n\t\tself: objCamelToKebab,\n\t\tconverter: camelToKebab,\n\t})(obj, skipKeys);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAO,IAAM,eAAe,CAAC,QAC5B,IAAI;AAAA,EAAQ;AAAA,EAAwB,CAAC,QAAQ,IAAI,KAAK,OACrD,CAAC,IAAI,GAAG,YAAY,CAAC,EAAE,KAAK,EAAE;AAC/B;AAEM,IAAM,eAAe,CAAC,QAC5B,IAAI;AAAA,EAAQ;AAAA,EAAmB,CAAC,QAAQ,IAAI,OAC3C,CAAC,IAAI,KAAK,GAAG,YAAY,CAAC,EAAE,KAAK,EAAE;AACpC;AAEM,IAAM,eAAe,CAAC,QAC5B,IAAI,QAAQ,gBAAgB,CAAC,UAAU,MAAM,YAAY,EAAE,QAAQ,KAAK,EAAE,CAAC;AAErE,IAAM,eAAe,CAAC,QAC5B,IAAI,QAAQ,YAAY,CAAC,UAAU,MAAM,YAAY,EAAE,QAAQ,IAAI,GAAG,CAAC;AAEjE,IAAM,eAAe,CAAC,QAC5B,IAAI,QAAQ,gBAAgB,CAAC,UAAU,MAAM,QAAQ,KAAK,GAAG,CAAC;AAExD,IAAM,eAAe,CAAC,QAC5B,IAAI,QAAQ,gBAAgB,CAAC,UAAU,MAAM,QAAQ,KAAK,GAAG,CAAC;AAE/D,IAAM,gBACL,CAAC,EAAE,MAAM,UAAU,MACnB,CAAC,KAAK,aAAa;AAClB,MAAI,CAAC,IAAK,QAAO;AACjB,QAAM,SAAS,CAAC;AAChB,MAAI,MAAM,QAAQ,GAAG,GAAG;AACvB,WAAO,IAAI,IAAI,CAAC,UAAU;AACzB,UAAI,OAAO,UAAU,UAAU;AAC9B,eAAO,KAAK,OAAO,QAAQ;AAAA,MAC5B;AACA,UAAI,OAAO,UAAU,SAAU,QAAO,UAAU,KAAK;AACrD,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACA,SAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,WAAW;AACpC,QAAI,SAAS,SAAS,MAAM,GAAG;AAC9B,aAAO,MAAM,IAAI,IAAI,MAAM;AAAA,IAC5B,OAAO;AACN,YAAM,SAAS,UAAU,MAAM;AAC/B,UAAI,QAAQ,IAAI,MAAM;AACtB,UACC,MAAM,QAAQ,KAAK,KAClB,UAAU,QACV,UAAU,UACV,MAAM,gBAAgB,QACtB;AACD,gBAAQ,KAAK,OAAO,QAAQ;AAAA,MAC7B;AACA,aAAO,MAAM,IAAI;AAAA,IAClB;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAEM,IAAM,kBAAkB,CAAC,KAAK,WAAW,CAAC,MAAM;AACtD,SAAO,cAAc;AAAA,IACpB,MAAM;AAAA,IACN,WAAW;AAAA,EACZ,CAAC,EAAE,KAAK,QAAQ;AACjB;AAEO,IAAM,kBAAkB,CAAC,KAAK,WAAW,CAAC,MAAM;AACtD,SAAO,cAAc;AAAA,IACpB,MAAM;AAAA,IACN,WAAW;AAAA,EACZ,CAAC,EAAE,KAAK,QAAQ;AACjB;AAEO,IAAM,kBAAkB,CAAC,KAAK,WAAW,CAAC,MAAM;AACtD,SAAO,cAAc;AAAA,IACpB,MAAM;AAAA,IACN,WAAW;AAAA,EACZ,CAAC,EAAE,KAAK,QAAQ;AACjB;",
  "names": ["import_dist"]
}
