{
  "version": 3,
  "sources": ["../../node_modules/@webitel/ui-sdk/src/modules/QueryFilters/mixins/baseFilterMixin/baseFilterMixin.js", "../../node_modules/@webitel/ui-sdk/src/modules/QueryFilters/mixins/_urlControllerMixin/_urlControllerMixin.js"],
  "sourcesContent": ["import getNamespacedState from '../../../../store/helpers/getNamespacedState.js';\nimport _urlControllerMixin from '../_urlControllerMixin/_urlControllerMixin.js';\n\nexport default {\n  mixins: [_urlControllerMixin],\n  props: {\n    namespace: {\n      type: String,\n      description: 'Store module namespace for state and actions mapping.',\n    },\n  },\n  created() {\n    this.restore({ filterQuery: this.filterQuery });\n  },\n  computed: {\n    filterSchema() {\n      if (!this.$store)\n        throw new Error(\n          'Vuex is required for default filterSchema baseFilterMixin property',\n        );\n      return getNamespacedState(this.$store.state, this.namespace)[\n        this.filterQuery\n      ];\n    },\n    value() {\n      return this.filterSchema.value;\n    },\n  },\n  methods: {\n    restore({ filterQuery }) {\n      const value = this.getValueFromQuery({ filterQuery });\n      if (value) this.restoreValue(value);\n    },\n    setValue(payload) {\n      if (!this.$store)\n        throw new Error(\n          'Vuex is required for default setValue() baseFilterMixin method',\n        );\n      return this.$store.dispatch(`${this.namespace}/SET_FILTER`, payload);\n    },\n  },\n};\n", "import deepEqual from 'deep-equal';\n\nexport default {\n  methods: {\n    changeRouteQuery({ filterQuery, value }) {\n      const query = { ...this.$route.query };\n      query[filterQuery] = value;\n      return this.$router.replace({\n        name: this.$router.currentRoute.name,\n        query,\n      });\n    },\n\n    async setValueToQuery({ filterQuery, value, storedProp = 'id' }) {\n      let newValue = '';\n      if (Array.isArray(value)) {\n        if (value.length && typeof value[0] !== 'object') {\n          newValue = value;\n        } else {\n          newValue = value.map((item) => item[storedProp]);\n        }\n      } else if (typeof value === 'object' && value !== null) {\n        newValue = value[storedProp];\n      } else {\n        newValue = value;\n      }\n      if (!deepEqual(this.$route.query[filterQuery], newValue)) {\n        await this.changeRouteQuery({\n          value: newValue,\n          filterQuery,\n        });\n      }\n    },\n\n    getValueFromQuery({ filterQuery }) {\n      return this.$route.query[filterQuery];\n    },\n  },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;;;ACAA;AAAA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,wBAAsB;AAEtB,IAAO,6BAAQ;AAAA,EACb,SAAS;AAAA,IACP,iBAAiB,EAAE,aAAa,MAAM,GAAG;AACvC,YAAM,QAAQ,EAAE,GAAG,KAAK,OAAO,MAAM;AACrC,YAAM,WAAW,IAAI;AACrB,aAAO,KAAK,QAAQ,QAAQ;AAAA,QAC1B,MAAM,KAAK,QAAQ,aAAa;AAAA,QAChC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,MAAM,gBAAgB,EAAE,aAAa,OAAO,aAAa,KAAK,GAAG;AAC/D,UAAI,WAAW;AACf,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,YAAI,MAAM,UAAU,OAAO,MAAM,CAAC,MAAM,UAAU;AAChD,qBAAW;AAAA,QACb,OAAO;AACL,qBAAW,MAAM,IAAI,CAAC,SAAS,KAAK,UAAU,CAAC;AAAA,QACjD;AAAA,MACF,WAAW,OAAO,UAAU,YAAY,UAAU,MAAM;AACtD,mBAAW,MAAM,UAAU;AAAA,MAC7B,OAAO;AACL,mBAAW;AAAA,MACb;AACA,UAAI,KAAC,kBAAAC,SAAU,KAAK,OAAO,MAAM,WAAW,GAAG,QAAQ,GAAG;AACxD,cAAM,KAAK,iBAAiB;AAAA,UAC1B,OAAO;AAAA,UACP;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IAEA,kBAAkB,EAAE,YAAY,GAAG;AACjC,aAAO,KAAK,OAAO,MAAM,WAAW;AAAA,IACtC;AAAA,EACF;AACF;;;ADnCA,IAAO,0BAAQ;AAAA,EACb,QAAQ,CAAC,0BAAmB;AAAA,EAC5B,OAAO;AAAA,IACL,WAAW;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,UAAU;AACR,SAAK,QAAQ,EAAE,aAAa,KAAK,YAAY,CAAC;AAAA,EAChD;AAAA,EACA,UAAU;AAAA,IACR,eAAe;AACb,UAAI,CAAC,KAAK;AACR,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AACF,aAAO,2BAAmB,KAAK,OAAO,OAAO,KAAK,SAAS,EACzD,KAAK,WACP;AAAA,IACF;AAAA,IACA,QAAQ;AACN,aAAO,KAAK,aAAa;AAAA,IAC3B;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,QAAQ,EAAE,YAAY,GAAG;AACvB,YAAM,QAAQ,KAAK,kBAAkB,EAAE,YAAY,CAAC;AACpD,UAAI,MAAO,MAAK,aAAa,KAAK;AAAA,IACpC;AAAA,IACA,SAAS,SAAS;AAChB,UAAI,CAAC,KAAK;AACR,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AACF,aAAO,KAAK,OAAO,SAAS,GAAG,KAAK,SAAS,eAAe,OAAO;AAAA,IACrE;AAAA,EACF;AACF;",
  "names": ["import_dist", "import_dist", "deepEqual"]
}
