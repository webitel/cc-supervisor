{
  "version": 3,
  "sources": ["../../node_modules/@webitel/ui-sdk/src/api/transformers/index.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/addQueryParamsToUrl/addQueryParamsToUrl.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/applyTransform.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/camelToSnake/camelToSnake.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/generateUrl/generateUrl.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/log/log.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/merge/merge.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/mergeEach/mergeEach.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/notify/notify.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/sanitize/sanitize.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/skipIf/skipIf.ts", "../../node_modules/@webitel/ui-sdk/src/api/transformers/snakeToCamel/snakeToCamel.transformer.js", "../../node_modules/@webitel/ui-sdk/src/api/transformers/starToSearch/starToSearch.transformer.js"],
  "sourcesContent": ["import addQueryParamsToUrl from './addQueryParamsToUrl/addQueryParamsToUrl.transformer.js';\nimport applyTransform from './applyTransform.js';\nimport camelToSnake from './camelToSnake/camelToSnake.transformer.js';\nimport generateUrl from './generateUrl/generateUrl.transformer.js';\nimport log from './log/log.transformer.js';\nimport merge from './merge/merge.transformer.js';\nimport mergeEach from './mergeEach/mergeEach.transformer.js';\nimport notify from './notify/notify.transformer.js';\nimport sanitize from './sanitize/sanitize.transformer.js';\nimport { skipIf } from './skipIf/skipIf';\nimport snakeToCamel from './snakeToCamel/snakeToCamel.transformer.js';\nimport starToSearch from './starToSearch/starToSearch.transformer.js';\n\nexport {\n  addQueryParamsToUrl,\n  camelToSnake,\n  generateUrl,\n  log,\n  merge,\n  mergeEach,\n  notify,\n  sanitize,\n  skipIf,\n  snakeToCamel,\n  starToSearch,\n};\n\nexport default applyTransform;\n", "// @author @stanislav-kozak\n// This function adds query parameters to a given URL.\n// Where queryArray is an array of query parameters in the format 'key=value'.\nconst addQueryParamsToUrl = (queryArray) => (url) => {\n  let modifyUrl = url;\n\n  if (queryArray && queryArray.length > 0) {\n    if (modifyUrl.includes('?')) {\n      modifyUrl += '&' + queryArray.join('&');\n\n      return modifyUrl;\n    }\n\n    modifyUrl += '?' + queryArray.join('&');\n  }\n\n  return modifyUrl;\n};\nexport default addQueryParamsToUrl;\n", "const applyTransform = (\n  target,\n  transformers,\n  { debug = false, withContext = null } = {},\n) => {\n  return transformers.reduce((result, transformer, index) => {\n    if (debug) console.info(`applyTransform debug on step ${index}`, result);\n\n    if (withContext) {\n      return transformer(result, withContext);\n    }\n\n    return transformer(result);\n  }, target);\n};\n\nexport default applyTransform;\n", "import { objCamelToSnake } from '../../../scripts/caseConverters.js';\n\nconst camelToSnakeTransformer = (skipKeys) => (obj) =>\n  objCamelToSnake(obj, skipKeys);\nexport default camelToSnakeTransformer;\n", "import * as qs from 'qs-esm';\n\nconst generateUrlTransformer = (baseUrl) => (params) => {\n  const stringifyOptions = {\n    skipEmptyString: true,\n    skipNull: true,\n    arrayFormat: 'repeat',\n  };\n\n  const url = `${baseUrl}?${qs.stringify(params, stringifyOptions)}`;\n  return url;\n};\n\nexport default generateUrlTransformer;\n", "const logTransformer = (arg) => {\n  console.log(arg);\n  return arg;\n};\n\nexport default logTransformer;\n", "import merge from 'deepmerge';\n\nconst mergeTransformer =\n  (...args) =>\n  (main) =>\n    merge.all([...args, main]);\n\nexport default mergeTransformer;\n", "import merge from 'deepmerge';\n\nconst mergeEachTransformer =\n  (...args) =>\n  (main) =>\n    main.map((item) => merge.all([...args, item]));\n\nexport default mergeEachTransformer;\n", "import eventBus from '../../../scripts/eventBus.js';\n\nconst notifyTransformer = (notificationObject) => {\n  /*\n  if passed arg is function, then this notification - static content,\n  predefined before actual transformer is called in applyTransform flow\n   */\n  if (typeof notificationObject === 'function') {\n    /*\n    so, create a callback which will send notification with params, passed to it\n     */\n    const callback = ({ type, text }) =>\n      eventBus.$emit('notification', {\n        type,\n        text,\n      });\n\n    /*\n    and, then, return a function, which will be called in main applyTransform flow,\n    calling passed arg function with callback, and returning actual notify payload\n     */\n    return (payload) => {\n      notificationObject({ callback });\n      return payload;\n    };\n  }\n  if (notificationObject instanceof Error) {\n    eventBus.$emit('notification', {\n      type: 'error',\n      text:\n        notificationObject.response?.data?.detail ||\n        notificationObject.response?.data?.message ||\n        notificationObject,\n    });\n  }\n  return notificationObject;\n};\n\nexport default notifyTransformer;\n", "const sanitizeTransformer = (fieldsToSend) => (item) => {\n  return Object.keys(item).reduce((sanitizedItem, key) => {\n    if (fieldsToSend.indexOf(key) === -1) return sanitizedItem;\n\n    return {\n      ...sanitizedItem,\n      [key]: item[key],\n    };\n  }, {});\n};\n\nexport default sanitizeTransformer;\n", "export const skipIf =\n  (\n    transformer: (...payload: unknown[]) => unknown,\n    ifFn: boolean | ((...payload: unknown[]) => boolean),\n  ) =>\n  (payload: unknown) => {\n    if (typeof ifFn === 'function' ? ifFn(payload) : ifFn) {\n      return payload;\n    }\n    return transformer(payload);\n  };\n", "import { objSnakeToCamel } from '../../../scripts/caseConverters.js';\n\nconst snakeToCamelTransformer = (skipKeys) => (obj) =>\n  objSnakeToCamel(obj, skipKeys);\nexport default snakeToCamelTransformer;\n", "import deepcopy from 'deep-copy';\nimport get from 'lodash/get.js';\n\nimport updateObject from '../../../scripts/updateObject.js';\n\nconst starToSearchTransformer =\n  (path = 'search') =>\n  (params) => {\n    const copy = deepcopy(params);\n    const value = get(copy, path);\n    if (!value || value.slice(-1) === '*') return copy;\n    return updateObject({ obj: copy, path, value: `${value}*` });\n  };\n\nexport default starToSearchTransformer;\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "merge", "import_dist", "import_deepmerge", "merge", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "deepcopy"]
}
