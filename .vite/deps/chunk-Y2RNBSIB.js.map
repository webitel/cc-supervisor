{
  "version": 3,
  "sources": ["../../node_modules/@webitel/ui-datalist/src/modules/filters/classes/Filter.ts", "../../node_modules/@webitel/ui-datalist/src/modules/filters/classes/FiltersManager.ts", "../../node_modules/@webitel/ui-datalist/src/modules/filters/scripts/utils.ts"],
  "sourcesContent": ["import { AnyFilterConfig } from '../modules/filterConfig';\n\nexport type FilterName = string;\nexport type FilterLabel = string;\nexport type FilterValue =\n  | object\n  | []\n  | string\n  | number\n  | boolean\n  | undefined\n  | null;\n\n/**\n * represents user-input data, that should be (re)stored\n */\nexport interface FilterData {\n  value: FilterValue;\n  label?: FilterLabel;\n}\n\nexport interface FilterInitParams extends FilterData {\n  name: FilterName;\n}\n\nexport interface FilterEnumOption {\n  locale: string;\n  value: FilterValue;\n}\n\nexport interface FilterInstanceConfig {\n  /**\n   * Perform simple type conversion on store/restore,\n   * without need to provide custom store/restore functions\n   */\n  storableType?: string;\n  /**\n   * list of persistence storages that should be used for this filter\n   */\n  storage?: string[];\n}\n\nexport interface IFilter {\n  name: FilterName;\n  value: FilterValue;\n  label?: FilterLabel;\n  set: (data: FilterData) => IFilter;\n}\n\nexport class Filter implements IFilter {\n  readonly name: FilterName;\n  label: FilterLabel;\n  value: FilterValue;\n\n  constructor(\n    { name, value, label }: FilterInitParams,\n    public payload: object | undefined,\n    public config: FilterInstanceConfig,\n  ) {\n    this.name = name;\n    this.value = value;\n    this.label = label;\n  }\n\n  set({ value, label }: { value?: FilterValue; label?: FilterLabel }): IFilter {\n    this.value = value;\n    this.label = label;\n    return this;\n  }\n}\n", "import { isEmpty } from '@webitel/ui-sdk/scripts';\n\nimport {\n  filterLabelToSnapshotKey,\n  filterNameFromSnapshotKey,\n  filterValuePropFromSnapshotKey,\n  filterValueToSnapshotKey,\n} from '../scripts/utils';\nimport {\n  Filter,\n  FilterData,\n  FilterInitParams,\n  FilterInstanceConfig,\n  FilterLabel,\n  FilterName,\n  FilterValue,\n  IFilter,\n} from './Filter';\n\nexport interface IFiltersManager {\n  filters: Map<FilterName, IFilter>;\n\n  hasFilter: (name: FilterName) => boolean;\n  getFilter: (name: FilterName) => IFilter;\n  addFilter: (\n    params: FilterInitParams,\n    payload?: object,\n    config?: FilterInstanceConfig,\n  ) => IFilter;\n  updateFilter: ({\n    name,\n  }: {\n    name: FilterName;\n    value?: FilterValue;\n    label?: FilterLabel;\n  }) => IFilter;\n  deleteFilter: (name: FilterName) => IFilter;\n\n  /**\n   * Converts filters data to String, that can be stored\n   */\n  toString: () => string;\n\n  /**\n   * Restores filters from string\n   */\n  fromString: (snapshotStr: string) => void;\n\n  /**\n   * deletes filters\n   * If include/exclude are not provided, all filters will be deleted\n   */\n  reset: ({\n    include,\n    exclude,\n  }?: {\n    include?: FilterName[];\n    exclude?: FilterName[];\n  }) => void;\n\n  /**\n   * @returns Array<FilterName>\n   */\n  getAllKeys: () => FilterName[];\n\n  /**\n   * @returns { FilterName: FilterValue }\n   */\n\n  getAllValues: () => { [name: FilterName]: FilterValue };\n  /**\n   * @returns Array<IFilter>\n   * @param include\n   * @param exclude\n   */\n\n  getFiltersList: ({\n    include,\n    exclude,\n  }?: {\n    include?: FilterName[];\n    exclude?: FilterName[];\n  }) => IFilter[];\n}\n\nexport type FiltersManagerConfig = FilterInstanceConfig;\n\nclass FiltersManager implements IFiltersManager {\n  filters = new Map<FilterName, IFilter>();\n\n  constructor(private config?: FiltersManagerConfig) {}\n\n  hasFilter(name: FilterName): boolean {\n    return this.filters.has(name);\n  }\n\n  getFilter(name: FilterName): IFilter {\n    return this.filters.get(name);\n  }\n\n  addFilter(\n    filterInitParams: FilterInitParams,\n    payload?: object,\n    config?: FilterInstanceConfig,\n  ): IFilter {\n    const filter = new Filter(filterInitParams, payload, config || this.config);\n    this.filters.set(filterInitParams.name, filter);\n    return filter;\n  }\n\n  updateFilter({\n    name,\n    value,\n    label,\n  }: {\n    name: FilterName;\n    value?: FilterValue;\n    label?: FilterLabel;\n  }): IFilter {\n    const filter = this.filters.get(name);\n    filter.set({ value, label });\n    return filter;\n  }\n\n  deleteFilter({ name }: { name: FilterName }): IFilter {\n    const filter = this.filters.get(name);\n    this.filters.delete(name);\n    return filter;\n  }\n\n  getAllValues(): { [name: FilterName]: FilterValue } {\n    const filters = [...this.filters.values()].reduce((acc, filter) => {\n      acc[filter.name] = filter.value;\n      return acc;\n    }, {});\n\n    return filters;\n  }\n\n  toString({\n    include,\n    exclude,\n  }: {\n    include?: FilterName[];\n    exclude?: FilterName[];\n  } = {}): string {\n    const filtersData = this.getFiltersList({ include, exclude }).reduce(\n      (acc, { name, label, value }) => {\n        if (isEmpty(value) && value == null) return acc;\n\n        acc[filterValueToSnapshotKey(name)] = value;\n\n        if (label) {\n          acc[filterLabelToSnapshotKey(name)] = label;\n        }\n\n        return acc;\n      },\n      {},\n    );\n\n    return JSON.stringify(filtersData);\n  }\n\n  fromString(snapshotStr: string): void {\n    const snapshot = JSON.parse(snapshotStr);\n\n    /*\n    first, make transition object from snapshot,\n    because filter should bw always added with value\n     */\n    const filtersData: { FilterName: FilterData } = Object.entries(\n      snapshot,\n    ).reduce(\n      (filtersAcc, [snapshotKey, snapshotValue]) => {\n        const name = filterNameFromSnapshotKey(snapshotKey);\n        const valueProp = filterValuePropFromSnapshotKey(snapshotKey);\n\n        if (filtersAcc[name]) {\n          filtersAcc[name][valueProp] = snapshotValue;\n        } else {\n          filtersAcc[name] = {\n            [valueProp]: snapshotValue,\n          };\n        }\n\n        return filtersAcc;\n      },\n      {} as { FilterName: FilterData },\n    );\n\n    Object.entries(filtersData).forEach(([name, filterData]) => {\n      if (this.hasFilter(name)) {\n        this.updateFilter({ name, ...filterData });\n      } else {\n        this.addFilter({ ...filterData, name });\n      }\n    });\n  }\n\n  getAllKeys(): FilterName[] {\n    return [...this.filters.keys()];\n  }\n\n  getFiltersList({\n    include,\n    exclude,\n  }: {\n    include?: FilterName[];\n    exclude?: FilterName[];\n  } = {}): IFilter[] {\n    const useInclude = !isEmpty(include);\n    const useExclude = !isEmpty(exclude) && !useInclude;\n\n    if (!useInclude && !useExclude) {\n      return [...this.filters.values()];\n    }\n\n    return [...this.filters.values()].filter(({ name }) => {\n      if (useInclude) {\n        return include.includes(name);\n      } else if (useExclude) {\n        return !exclude.includes(name);\n      }\n\n      return true;\n    });\n  }\n\n  reset({\n    include,\n    exclude,\n  }: {\n    include?: FilterName[];\n    exclude?: FilterName[];\n  } = {}): void {\n    const useInclude = !isEmpty(include);\n    const useExclude = !isEmpty(exclude) && !useInclude;\n\n    if (!useInclude && !useExclude) {\n      this.filters.clear();\n      return;\n    }\n\n    if (useInclude) {\n      include.forEach((name) => {\n        this.filters.delete(name);\n      });\n      return;\n    }\n\n    if (useExclude) {\n      this.filters.forEach((_, filterName) => {\n        if (!exclude.includes(filterName)) {\n          this.filters.delete(filterName);\n        }\n      });\n      return;\n    }\n  }\n}\n\nexport const createFiltersManager = (\n  config?: FiltersManagerConfig,\n): IFiltersManager => {\n  return new FiltersManager(config);\n};\n", "import {FilterName} from \"../classes/Filter\";\n\nexport const filterLabelToSnapshotKey = (name: FilterName): string =>\n  `${name}_lbl`;\n\nexport const filterValueToSnapshotKey = (name: FilterName): string =>\n  `${name}_val`;\n\nconst filterLabelFromSnapshotKey = (snapshotKey: string): FilterName =>\n  snapshotKey.replace('_lbl', '');\n\nconst filterValueFromSnapshotKey = (snapshotKey: string): FilterName =>\n  snapshotKey.replace('_val', '');\n\nconst isLabelSnapshotKey = (snapshotKey: string): boolean =>\n  snapshotKey.includes('_lbl');\n\nconst isValueSnapshotKey = (snapshotKey: string): boolean =>\n  snapshotKey.includes('_val');\n\nexport const filterNameFromSnapshotKey = (snapshotKey: string): FilterName => {\n  if (isLabelSnapshotKey(snapshotKey))\n    return filterLabelFromSnapshotKey(snapshotKey);\n  if (isValueSnapshotKey(snapshotKey))\n    return filterValueFromSnapshotKey(snapshotKey);\n};\n\nexport const filterValuePropFromSnapshotKey = (snapshotKey: string): string => {\n  if (isLabelSnapshotKey(snapshotKey)) return 'label';\n  if (isValueSnapshotKey(snapshotKey)) return 'value';\n};\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist", "import_dist"]
}
