{
  "version": 3,
  "sources": ["../../node_modules/@webitel/ui-sdk/src/mixins/dataFilterMixins/sortFilterMixin.js"],
  "sourcesContent": ["import baseFilterMixin from './baseFilterMixin/baseFilterMixin.js';\n\nconst SortSymbols = Object.freeze({\n  ASC: 'asc',\n  DESC: 'desc',\n  NONE: null,\n});\n\nconst getNextSortOrder = (sort) => {\n  switch (sort) {\n    case SortSymbols.NONE:\n      return SortSymbols.ASC;\n    case SortSymbols.ASC:\n      return SortSymbols.DESC;\n    case SortSymbols.DESC:\n      return SortSymbols.NONE;\n    default:\n      return SortSymbols.ASC;\n  }\n};\n\nconst sortToQueryAdapter = (order) => {\n  switch (order) {\n    case SortSymbols.ASC:\n      return '+';\n    case SortSymbols.DESC:\n      return '-';\n    default:\n      return '';\n  }\n};\n\nconst queryToSortAdapter = (order) => {\n  switch (order) {\n    case '+':\n      return SortSymbols.ASC;\n    case '-':\n      return SortSymbols.DESC;\n    default:\n      return SortSymbols.NONE;\n  }\n};\n\nconst encodeSortQuery = ({ column, order }) =>\n  `${sortToQueryAdapter(order)}${column.field}`;\n\nconst decodeSortQuery = ({ value }) => {\n  const sort = queryToSortAdapter(value.slice(0, 1));\n  const sortedColumn = sort ? value.slice(1) : value;\n  return {\n    [sortedColumn]: sort,\n  };\n};\n\nexport default {\n  mixins: [baseFilterMixin],\n  data: () => ({\n    filterQuery: 'sort',\n  }),\n  methods: {\n    sort(column) {\n      const order = getNextSortOrder(column.sort);\n      return this.setValue({ column, order });\n    },\n\n    setValue({ column, order }) {\n      const headers = this.headers.map((col) => {\n        const sortFieldValue = col?.sort;\n        return {\n          ...col,\n          sort: col === column ? order : sortFieldValue,\n        };\n      });\n      const value = encodeSortQuery({ column, order });\n      this.setHeaders(headers);\n      return this.setValueToQuery({\n        value,\n        filterQuery: this.filterQuery,\n      });\n    },\n\n    restoreValue(value) {\n      const sortedColumns = decodeSortQuery({ value });\n      const headers = this.headers.map((header) => ({\n        ...header,\n        sort: sortedColumns[header.field] || null,\n      }));\n      this.setHeaders(headers);\n    },\n  },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAEA,IAAM,cAAc,OAAO,OAAO;AAAA,EAChC,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AACR,CAAC;AAED,IAAM,mBAAmB,CAAC,SAAS;AACjC,UAAQ,MAAM;AAAA,IACZ,KAAK,YAAY;AACf,aAAO,YAAY;AAAA,IACrB,KAAK,YAAY;AACf,aAAO,YAAY;AAAA,IACrB,KAAK,YAAY;AACf,aAAO,YAAY;AAAA,IACrB;AACE,aAAO,YAAY;AAAA,EACvB;AACF;AAEA,IAAM,qBAAqB,CAAC,UAAU;AACpC,UAAQ,OAAO;AAAA,IACb,KAAK,YAAY;AACf,aAAO;AAAA,IACT,KAAK,YAAY;AACf,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,IAAM,qBAAqB,CAAC,UAAU;AACpC,UAAQ,OAAO;AAAA,IACb,KAAK;AACH,aAAO,YAAY;AAAA,IACrB,KAAK;AACH,aAAO,YAAY;AAAA,IACrB;AACE,aAAO,YAAY;AAAA,EACvB;AACF;AAEA,IAAM,kBAAkB,CAAC,EAAE,QAAQ,MAAM,MACvC,GAAG,mBAAmB,KAAK,CAAC,GAAG,OAAO,KAAK;AAE7C,IAAM,kBAAkB,CAAC,EAAE,MAAM,MAAM;AACrC,QAAM,OAAO,mBAAmB,MAAM,MAAM,GAAG,CAAC,CAAC;AACjD,QAAM,eAAe,OAAO,MAAM,MAAM,CAAC,IAAI;AAC7C,SAAO;AAAA,IACL,CAAC,YAAY,GAAG;AAAA,EAClB;AACF;AAEA,IAAO,0BAAQ;AAAA,EACb,QAAQ,CAAC,uBAAe;AAAA,EACxB,MAAM,OAAO;AAAA,IACX,aAAa;AAAA,EACf;AAAA,EACA,SAAS;AAAA,IACP,KAAK,QAAQ;AACX,YAAM,QAAQ,iBAAiB,OAAO,IAAI;AAC1C,aAAO,KAAK,SAAS,EAAE,QAAQ,MAAM,CAAC;AAAA,IACxC;AAAA,IAEA,SAAS,EAAE,QAAQ,MAAM,GAAG;AAC1B,YAAM,UAAU,KAAK,QAAQ,IAAI,CAAC,QAAQ;AACxC,cAAM,iBAAiB,2BAAK;AAC5B,eAAO;AAAA,UACL,GAAG;AAAA,UACH,MAAM,QAAQ,SAAS,QAAQ;AAAA,QACjC;AAAA,MACF,CAAC;AACD,YAAM,QAAQ,gBAAgB,EAAE,QAAQ,MAAM,CAAC;AAC/C,WAAK,WAAW,OAAO;AACvB,aAAO,KAAK,gBAAgB;AAAA,QAC1B;AAAA,QACA,aAAa,KAAK;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,IAEA,aAAa,OAAO;AAClB,YAAM,gBAAgB,gBAAgB,EAAE,MAAM,CAAC;AAC/C,YAAM,UAAU,KAAK,QAAQ,IAAI,CAAC,YAAY;AAAA,QAC5C,GAAG;AAAA,QACH,MAAM,cAAc,OAAO,KAAK,KAAK;AAAA,MACvC,EAAE;AACF,WAAK,WAAW,OAAO;AAAA,IACzB;AAAA,EACF;AACF;",
  "names": ["import_dist"]
}
